// Auto-generates src/translations/index.ts and src/translations/plugins/index.ts
// The generated files are not committed to git. Build and tests run this generator automatically.
// Run manually via: pnpm generate:translations

const fs = require("fs");
const path = require("path");

const projectRoot = path.resolve(__dirname, "..");
const translationsDir = path.join(projectRoot, "src", "translations");
const pluginsDir = path.join(translationsDir, "plugins");
const mainOutputFile = path.join(translationsDir, "index.ts");
const pluginsOutputFile = path.join(pluginsDir, "index.ts");

function generateMainIndex() {
	const files = fs
		.readdirSync(translationsDir, { withFileTypes: true })
		.filter((d) => d.isFile())
		.map((d) => d.name)
		.filter((name) => name.endsWith(".ts"))
		.filter((name) => name !== "index.ts")
		.sort((a, b) => a.localeCompare(b));

	const entries = files.map((name) => {
		const base = name.replace(/\.ts$/, "");
		const varName = `LOCALES_${base.replace(/[^a-zA-Z0-9_$]/g, "_")}`;
		return { base, varName };
	});

	const header = [
		"// This file is AUTO-GENERATED by scripts/generate-translations-index.cjs. Do not edit manually.",
		"// To update, run: npm run generate:translations or pnpm generate:translations",
		"",
	].join("\n");

	const imports = entries
		.map(
			({ base, varName }) =>
				`import { LOCALES as ${varName} } from "./${base}";`,
		)
		.join("\n");

	const body = [
		"",
		"export const defaultTranslations = {",
		...entries.map(({ varName }) => `\t...${varName},`),
		"};",
		"",
	].join("\n");

	const content = [header, imports, body].join("\n");
	fs.writeFileSync(mainOutputFile, content, "utf8");
	// eslint-disable-next-line no-console
	console.log(`Generated: ${path.relative(projectRoot, mainOutputFile)}`);
}

function generatePluginsIndex() {
	const pluginDirs = fs
		.readdirSync(pluginsDir, { withFileTypes: true })
		.filter((d) => d.isDirectory())
		.map((d) => d.name)
		.sort((a, b) => a.localeCompare(b));

	const entries = pluginDirs.map((dirName) => {
		// Convert kebab-case to camelCase for variable names
		const varName =
			dirName
				.split("-")
				.map((part, index) =>
					index === 0 ? part : part.charAt(0).toUpperCase() + part.slice(1),
				)
				.join("") + "Translations";
		return { dirName, varName };
	});

	const header = [
		"// This file is AUTO-GENERATED by scripts/generate-translations-index.cjs. Do not edit manually.",
		"// To update, run: npm run generate:translations or pnpm generate:translations",
		"",
	].join("\n");

	const imports = entries
		.map(({ dirName, varName }) => `export { ${varName} } from "./${dirName}";`)
		.join("\n");

	const content = [header, imports, ""].join("\n");
	fs.writeFileSync(pluginsOutputFile, content, "utf8");
	// eslint-disable-next-line no-console
	console.log(`Generated: ${path.relative(projectRoot, pluginsOutputFile)}`);
}

function generatePluginIndexes() {
	const pluginDirs = fs
		.readdirSync(pluginsDir, { withFileTypes: true })
		.filter((d) => d.isDirectory())
		.map((d) => d.name)
		.sort((a, b) => a.localeCompare(b));

	for (const dirName of pluginDirs) {
		const pluginDir = path.join(pluginsDir, dirName);
		const pluginIndexFile = path.join(pluginDir, "index.ts");

		// Check if plugin directory has translation files
		const translationFiles = fs
			.readdirSync(pluginDir, { withFileTypes: true })
			.filter((d) => d.isFile())
			.map((d) => d.name)
			.filter((name) => name.endsWith(".ts"))
			.filter((name) => name !== "index.ts")
			.sort((a, b) => a.localeCompare(b));

		if (translationFiles.length === 0) {
			continue; // Skip if no translation files found
		}

		// Convert kebab-case to camelCase for variable names
		const varName =
			dirName
				.split("-")
				.map((part, index) =>
					index === 0 ? part : part.charAt(0).toUpperCase() + part.slice(1),
				)
				.join("") + "Translations";

		const header = [
			"// This file is AUTO-GENERATED by scripts/generate-translations-index.cjs. Do not edit manually.",
			"// To update, run: npm run generate:translations or pnpm generate:translations",
			"",
		].join("\n");

		const imports = translationFiles
			.map((fileName) => {
				const base = fileName.replace(/\.ts$/, "");
				return `import { LOCALES as LOCALES_${base.replace(/[^a-zA-Z0-9_$]/g, "_")} } from "./${base}";`;
			})
			.join("\n");

		const body = [
			"",
			`export const ${varName} = {`,
			...translationFiles.map((fileName) => {
				const base = fileName.replace(/\.ts$/, "");
				const varName = `LOCALES_${base.replace(/[^a-zA-Z0-9_$]/g, "_")}`;
				return `\t...${varName},`;
			}),
			"};",
			"",
		].join("\n");

		const content = [header, imports, body].join("\n");
		fs.writeFileSync(pluginIndexFile, content, "utf8");
		// eslint-disable-next-line no-console
		console.log(`Generated: ${path.relative(projectRoot, pluginIndexFile)}`);
	}
}

function main() {
	generateMainIndex();
	generatePluginIndexes();
	generatePluginsIndex();
}

main();
